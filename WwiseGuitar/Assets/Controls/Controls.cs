//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""GuitarController"",
            ""id"": ""5a1d120e-c619-423e-a7b5-b02586ab60f5"",
            ""actions"": [
                {
                    ""name"": ""RZ"",
                    ""type"": ""Value"",
                    ""id"": ""496b0007-1a92-4c8d-820b-e993d96c69f9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Z"",
                    ""type"": ""Value"",
                    ""id"": ""1a4fe846-560b-46fb-a722-7b480959c7e8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9102c2eb-1b77-40e4-bd3f-8f349b3775e0"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c354cc79-aab1-4fc5-883a-ce37c0af7a88"",
                    ""path"": ""<HID::Licensed by Nintendo of America  Harmonix RB3 Mustang Guitar for Nintendo Wii>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6900bf1-7fab-4190-9ce5-a6e339a139f4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b8a7a4e-ded7-469e-a1e9-c0dc5c566952"",
                    ""path"": ""<HID::Licensed by Nintendo of America  Harmonix RB3 Mustang Guitar for Nintendo Wii>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GuitarController
        m_GuitarController = asset.FindActionMap("GuitarController", throwIfNotFound: true);
        m_GuitarController_RZ = m_GuitarController.FindAction("RZ", throwIfNotFound: true);
        m_GuitarController_Z = m_GuitarController.FindAction("Z", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GuitarController
    private readonly InputActionMap m_GuitarController;
    private List<IGuitarControllerActions> m_GuitarControllerActionsCallbackInterfaces = new List<IGuitarControllerActions>();
    private readonly InputAction m_GuitarController_RZ;
    private readonly InputAction m_GuitarController_Z;
    public struct GuitarControllerActions
    {
        private @Controls m_Wrapper;
        public GuitarControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RZ => m_Wrapper.m_GuitarController_RZ;
        public InputAction @Z => m_Wrapper.m_GuitarController_Z;
        public InputActionMap Get() { return m_Wrapper.m_GuitarController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GuitarControllerActions set) { return set.Get(); }
        public void AddCallbacks(IGuitarControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_GuitarControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GuitarControllerActionsCallbackInterfaces.Add(instance);
            @RZ.started += instance.OnRZ;
            @RZ.performed += instance.OnRZ;
            @RZ.canceled += instance.OnRZ;
            @Z.started += instance.OnZ;
            @Z.performed += instance.OnZ;
            @Z.canceled += instance.OnZ;
        }

        private void UnregisterCallbacks(IGuitarControllerActions instance)
        {
            @RZ.started -= instance.OnRZ;
            @RZ.performed -= instance.OnRZ;
            @RZ.canceled -= instance.OnRZ;
            @Z.started -= instance.OnZ;
            @Z.performed -= instance.OnZ;
            @Z.canceled -= instance.OnZ;
        }

        public void RemoveCallbacks(IGuitarControllerActions instance)
        {
            if (m_Wrapper.m_GuitarControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGuitarControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_GuitarControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GuitarControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GuitarControllerActions @GuitarController => new GuitarControllerActions(this);
    public interface IGuitarControllerActions
    {
        void OnRZ(InputAction.CallbackContext context);
        void OnZ(InputAction.CallbackContext context);
    }
}
